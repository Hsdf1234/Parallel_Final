/*
???int???????????¦Ë?
5??bit??????int
???????????????????????????
*/

#include <bits/stdc++.h>

using namespace std;

// ????????????????????????????????????????????????????????
#define num_columns 23045
#define num_elimination_rows 18748
#define num_eliminated_rows 14325

// ???øA??
const int length = ceil(num_columns / 5.0);

// ???char??????§Õ›¥??R????????E?????????
char R[10000][length];  // R[i]??????????i???¡À??0?????????????????
                        // ????????????num_elimination_rows?????????§³
char E[num_eliminated_rows][length];

// ??????????
bool lifted[num_eliminated_rows];

// ?????¦Ë???????????
void print() {
    for (int i=0; i<num_eliminated_rows; i++) {
        // cout << i << ':';
        for (int j=num_columns-1; j>=0; j--) {
            // ??j¦Ë?1
            if (((E[i][j / 5] >> (j - 5*(j/5)))) & 1 == 1) {
                cout << j << ' ';
            }
        }
        // for (int j=length-1; j>=0; j--) {
        //     cout << E[i][j] << ' ';
        // }
        cout << endl;
    }
}

// ???????????????OpenMP?????????????5???????/??????§Ô???
void solve() {
    // cout << "in";
    int n;
    // ???¦Á???????????????§Ö?5??bit?????????????????????
    // E[i][x]?????5x ~ 5(x+1)-1??5??bit??????????›¥bit
    // ?????›¥???????????????
    for (n = length - 1; n >= 0; n--) {
        // ???????????
        vector<pair<int, int>> records;  // ??? <????§Ó??????§Ü????????????§Ü?>
        for (int i=0; i<num_eliminated_rows; i++) {
            // ?????????????§»??
            if (lifted[i]) {
                continue;
            }
            // ??????????????????????
            for (int j = 5*(n+1)-1; j >= 5*n; j--) {
                if (E[i][n] >> (j-5*n) == 1) {\
                    if (R[j][n] != 0) {
                        E[i][n] ^= R[j][n];
                        records.emplace_back(i, j);
                    } else {
                        // ???????????????????????
                        for (auto pair : records) {
                            int row = pair.first;
                            int leader = pair.second;
                            if (row == i) {
                                // ???????¦Ë?????
                                for (int k=n-1; k>=0; k--) {
                                    E[i][k] ^= R[leader][k];
                                }
                            }
                        }
                        // ??????j?? = ??????§Ö?i??
                        for (int k=0; k<length; k++) {
                            R[j][k] = E[i][k];
                        }
                        lifted[i] = true;
                        break;
                    }
                }
            }
        }
        // ???????????????§ß??§Ó??§Þ???????records?§Ö??????§Ø?????????????????§Õ??????????????????n?§µ?
        // ??§»????????????????????????????§Þ????????????????????????§Ý?
        // OpenMP???????§Ý?
        #pragma omp parallel for simd schedule(guided, 1)
        for (int m=n-1; m>=0; m--) {
            for (auto pair : records) {
                int row = pair.first;
                int leader = pair.second;
                // ??????????????
                if (lifted[row]) {
                    continue;
                }
                E[row][m] ^= R[leader][m];
            }
        }
        // cout << "??????" << endl;
        // cout << "n=" << n << endl;
        // print();
    }
}

int main() {
    // ?????????
    ifstream file_R;
    char buffer[10000] = {0};
    // file_R.open("/home/data/Groebner/????????1 ????????130???????????22?????????8/?????.txt");
    file_R.open("R.txt");
    if (file_R.fail()) {
        cout << "???????" << endl;
    }
    while (file_R.getline(buffer, sizeof(buffer))) {
        // ???¦Æ?????§µ???????32¦Ë????????int??
        int bit;
        stringstream line(buffer);
        int first_in = 1;

        // ??????index????????
        int index;
        while (line >> bit) {
            if (first_in) {
                first_in = 0;
                index = bit;
            }

            // ????index?§Ö????????¦Ë ??1
            R[index][bit / 5] |= 1 << (bit - (bit / 5) * 5);
        }
    }
    file_R.close();
//--------------------------------
    // ?????????
    ifstream file_E;
    // file_E.open("/home/data/Groebner/????????1 ????????130???????????22?????????8/???????.txt");
    file_E.open("E.txt");

    // ??????§Ö?index????????????
    int index = 0;
    while (file_E.getline(buffer, sizeof(buffer))) {
        // ???¦Æ?????§µ???????32¦Ë????????int??
        int bit;
        stringstream line(buffer);
        while (line >> bit) {
            // ????index?§Ö??????§Ø??¦Ë ??1
            E[index][bit / 5] |= (1 << (bit - (bit / 5) * 5));
        }
        index++;
    }
    // cout << E[6][50];
    // print();
//--------------------------------
    // ???C++11??chrono???????
    auto start = chrono::high_resolution_clock::now();
    solve();
    auto end = chrono::high_resolution_clock::now();
    auto diff = chrono::duration_cast<chrono::duration<double, milli>>(end - start);
    cout << diff.count() << "ms" << endl;
//--------------------------------
    // ???????????
    // print();
    return 0;
}